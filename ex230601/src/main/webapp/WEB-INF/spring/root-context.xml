<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- datasource connection pool -->
	<!-- HikariCP를 여기다가 적어줘야 동작함. 라이브러리를 등록했으면 필요한 BEAN이 무엇인지 파악해야함 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@127.0.0.1:1521:xe" />
		<property name="username" value="hr" />
		<property name="password" value="hr" />
	</bean>


    
	<!-- 커넥션 풀 역할을 함. 
	클래스에 따라 프로퍼티가 달라짐. DBCP : 
	pull : 컨테이너를 풀이라고 함.
	커넥션 : 시간 제일 많이 걸림. -> 미리 일정 갯수의 커넥션을 풀에 담아 놓기.
	스프링은 모두 풀 개념임. DI -> 객체의 생성과 관리를 스프링이 알아서 해준다. IOC -> 스프링 컨테이너의 제일 중요한 핵심 용어 
	IOC- 객체의 주체가 역전 되었다.  메모리를 효율적으로 쓰기 위해서 -> DI
	-->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	

	<!-- mybatis SqlSessionFactory 
	mybatis를 동작시키는 클래스. -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	
	<!-- mapper scan -->
	<!-- 어떤 패키지든 상관없으니까 기능별 하위 패키지를 모두 ~ 
	인터페이스를 가지고 클래스를 만들어 주는 역할.-->
	<mybatis-spring:scan base-package="com.yedam.app.**.mapper"/>

</beans>
